jwt:
  expiration: 604800
  secret: xmJwtSecret
  tokenHead: 'Bearer '
  tokenHeader: Authorization
server:
  port: 8081
  servlet:
    context-path: /v1
spring:
  kafka:
    # 以逗号分隔的地址列表，用于建立与Kafka集群的初始连接(kafka 默认的端口号为9092)
    #bootstrap-servers: 172.17.21.251:9092
    bootstrap-servers: 192.168.116.12:9092
    #注，上述地址必须配置成你自己的Windows或者Unix的真实ip地址，不要映射地址，否则无法访问，本机在运行之前必须先开启kafka服务，否则无法运行本程序
    producer:

      # 发生错误后，消息重发的次数。
      retries: 0
      #当有多个消息需要被发送到同一个分区时，生产者会把它们放在同一个批次里。该参数指定了一个批次可以使用的内存大小，按照字节数计算。
      batch-size: 16384
      # 设置生产者内存缓冲区的大小。
      buffer-memory: 33554432
      # 键的序列化方式
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      # 值的序列化方式
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      # acks=0 ： 生产者在成功写入消息之前不会等待任何来自服务器的响应。
      # acks=1 ： 只要集群的首领节点收到消息，生产者就会收到一个来自服务器成功响应。
      # acks=all ：只有当所有参与复制的节点全部收到消息时，生产者才会收到一个来自服务器的成功响应。
      acks: 1
    consumer:
      # 自动提交的时间间隔 在spring boot 2.X 版本中这里采用的是值的类型为Duration 需要符合特定的格式，如1S,1M,2H,5D
      auto-commit-interval: 1S
      # 该属性指定了消费者在读取一个没有偏移量的分区或者偏移量无效的情况下该作何处理：
      # latest（默认值）在偏移量无效的情况下，消费者将从最新的记录开始读取数据（在消费者启动之后生成的记录）
      # earliest ：在偏移量无效的情况下，消费者将从起始位置读取分区的记录
      auto-offset-reset: earliest
      # 是否自动提交偏移量，默认值是true,为了避免出现重复数据和数据丢失，可以把它设置为false,然后手动提交偏移量
      enable-auto-commit: true
      # 键的反序列化方式
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      # 值的反序列化方式
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      group-id: cw
    listener:
      # 在侦听器容器中运行的线程数。
      concurrency: 5
  datasource:
    primary:
      driver-class-name: com.mysql.jdbc.Driver
      jdbc-url: jdbc:mysql://localhost:3306/spring_test?useSSL=false&useUnicode=true&characterEncoding=utf8
      password: 123456
      username: test
    secondary:
      driver-class-name: org.h2.Driver
      jdbc-url: jdbc:h2:tcp://localhost/D:/h2db
      password:
      username: sa
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        format_sql: true
  redis:
    database: 0
    host: 127.0.0.1
    lettuce:
      pool:
        max-active: 8
        max-idle: 8
        max-wait: -1ms
        min-idle: 0
      shutdown-timeout: 100ms
    password: ''
    port: 6379
  servlet:
    multipart:
      max-file-size: 1MB
      max-request-size: 1MB
  security:
    oauth2:
      client:
        registration:
          github:
            client-id: de87e995aa6c1c726646
            client-secret: 5e0aadf8a2b9203e318fc2b4e938862d255efbea
            client-name: Auth with Github
            scope: read:user
            provider: github
            redirect-uri-template: http://127.0.0.1:8081/auth/oauth2/code/github
            client-authentication-method: basic
            authorization-grant-type: authorization_code
        provider:
          github:
            authorization-uri: https://github.com/login/oauth/authorize
            token-uri: https://github.com/login/oauth/access_token
            user-info-uri: https://api.github.com/user
            user-info-attribute: info
github:
  #client:
  clientId: de87e995aa6c1c726646
  clientSecret: 5e0aadf8a2b9203e318fc2b4e938862d255efbea
  accessTokenUri: https://github.com/login/oauth/access_token
  userAuthorizationUri: https://github.com/login/oauth/authorize
  clientAuthenticationScheme: form
  registeredRedirectUri: http://127.0.0.1:8081/auth/oauth2/code/github
  authorities: READ
  authorizedGrantTypes: authorization_code
  scope: read:user
xm-resource:
  userInfoUri: https://api.github.com/user
front-end:
  login-success-redirect-uri: http://127.0.0.1:8088/#/login
